{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "66c80c76",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70f48d10",
   "metadata": {},
   "source": [
    "# 데이터 불러오기"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "79040032",
   "metadata": {},
   "outputs": [],
   "source": [
    "train = pd.read_csv('./Data/titanic/train(3).csv')\n",
    "test = pd.read_csv('./Data/titanic/test(3).csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "010769c6",
   "metadata": {},
   "source": [
    "PassengerID 탑승객 고유 아이디\n",
    "\n",
    "Survival 탑승객 생존 유무 (0: 사망, 1: 생존)\n",
    "\n",
    "Pclass 등실의 등급\n",
    "\n",
    "Name 이름\n",
    "\n",
    "Sex 성별\n",
    "\n",
    "Age 나이\n",
    "\n",
    "Sibsp 함께 탑승한 형제자매, 아내, 남편의 수\n",
    "\n",
    "Parch 함께 탑승한 부모, 자식의 수\n",
    "\n",
    "Ticket 티켓 번호\n",
    "\n",
    "Fare 티켓의 요금\n",
    "\n",
    "Cabin 객실 번호\n",
    "\n",
    "Embarked 배에 탑승한 항구 이름\n",
    "( C = Cherbourn, Q = Queenstown, S = Southampton)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b4e42c14",
   "metadata": {},
   "source": [
    "# 데이터 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "b5e05dda",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "train.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "bda0046c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PassengerId      0\n",
       "Survived         0\n",
       "Pclass           0\n",
       "Name             0\n",
       "Sex              0\n",
       "Age            177\n",
       "SibSp            0\n",
       "Parch            0\n",
       "Ticket           0\n",
       "Fare             0\n",
       "Cabin          687\n",
       "Embarked         2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum() # 결측치 확인"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "37259446",
   "metadata": {},
   "source": [
    "# 데이터 전처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c1165878",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 사용하지 않을 데이터\n",
    "# PassengerId, Name, Ticket\n",
    "\n",
    "train = train.drop(columns=['PassengerId','Name','Ticket'])\n",
    "test = test.drop(columns=['PassengerId','Name','Ticket'])\n",
    "y = train['Survived']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "132999cf",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Cabin',\n",
       "       'Embarked'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns #columns 확인"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "773f694c",
   "metadata": {},
   "source": [
    "# 칼럼별 EDA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "43c879fc",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Pclass', ylabel='count'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data = train, x = 'Pclass', hue='Survived')\n",
    "#Pclass별 생존자수 비교\n",
    "#3등급의 인원들이 사망자가 많은 것을 확인할 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1e417d29",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Sex', ylabel='count'>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data = train, x = 'Sex', hue='Survived')\n",
    "\n",
    "#성별 생존자수 비교\n",
    "#남자인원들이 사망자가 많은 것을 확인할 수 있다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "83c1f0d1",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Age', ylabel='Count'>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data = train, x = 'Age', hue='Survived')\n",
    "\n",
    "#나이별 생존자수 비교\n",
    "# 나이가 어린 사람들은 셍존자가 많은 것을 확인할 수 있다.\n",
    "# 20~50 대까지는 사망자수가 훨씬 많다\n",
    "# 65세 이후로는 대부분 사망자수가 많다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c46b5139",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='SibSp', ylabel='Count'>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data = train, x = 'SibSp', hue='Survived')\n",
    "\n",
    "# 부양가족수 별 생존자수 비교"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1b9ba150",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Fare', ylabel='Count'>"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.histplot(data = train, x = 'Fare', hue='Survived')\n",
    "\n",
    "# 티켓 가격별 생존자수 비교\n",
    "\n",
    "# 이상치가 있는 것을 확인했다."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c4fad565",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:ylabel='Fare'>"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data = train, y = 'Fare')\n",
    "\n",
    "# 티켓 가격 박스형 그래프\n",
    "# 이상치 확인"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "096556c7",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Embarked', ylabel='count'>"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data = train, x = 'Embarked', hue='Survived')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "f5c3f064",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Survived', 'Pclass', 'Sex', 'Age', 'SibSp', 'Parch', 'Fare', 'Cabin',\n",
       "       'Embarked'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "064d6271",
   "metadata": {},
   "source": [
    "# 결측치 처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "70f7bb30",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Survived      0\n",
       "Pclass        0\n",
       "Sex           0\n",
       "Age         177\n",
       "SibSp         0\n",
       "Parch         0\n",
       "Fare          0\n",
       "Cabin       687\n",
       "Embarked      2\n",
       "dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "81504ef0",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Pclass        0\n",
       "Sex           0\n",
       "Age          86\n",
       "SibSp         0\n",
       "Parch         0\n",
       "Fare          1\n",
       "Cabin       327\n",
       "Embarked      0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a31fa5ea",
   "metadata": {},
   "source": [
    "## Age\n",
    "\n",
    "평균값으로 filling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "464b11b7",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "train['Age'] =train['Age'].fillna(train['Age'].mean())#평균값으로 filling\n",
    "test['Age'] = test['Age'].fillna(train['Age'].mean())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7a379019",
   "metadata": {},
   "source": [
    "## Cabin\n",
    "\n",
    "약 900개의 데이터 중 600개 2/3 이 결측치 이고 예측에 크게 중요하지 않다고 생각하여 drop"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "b19d9f4d",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "B96 B98        4\n",
       "C23 C25 C27    4\n",
       "G6             4\n",
       "D              3\n",
       "F2             3\n",
       "              ..\n",
       "B41            1\n",
       "T              1\n",
       "C62 C64        1\n",
       "C46            1\n",
       "C30            1\n",
       "Name: Cabin, Length: 147, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train['Cabin'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "1eecd412",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "train = train.drop(columns='Cabin')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "200952d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "test = test.drop(columns='Cabin')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "75017055",
   "metadata": {},
   "source": [
    "## Embarked"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "fd1ce691",
   "metadata": {},
   "outputs": [],
   "source": [
    "train['Embarked'] = train['Embarked'].fillna('S') # 최빈값으로 filling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "5ceb3b9f",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Embarked'] = test['Embarked'].fillna('S')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "44990fb4",
   "metadata": {},
   "source": [
    "## Fare"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "7e60a1ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "test['Fare'] = test['Fare'].fillna(train['Fare'].mean())\n",
    "#train 의 평균값으로 filling"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4ce21cc8",
   "metadata": {},
   "source": [
    "# 이상치 처리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "ff0d38c6",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data = train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "469bcc9a",
   "metadata": {},
   "source": [
    "이상치가 심한 Fare 칼럼에만 이상치 제거"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "13896c57",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>258</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>679</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>36.0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>737</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>512.3292</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     Survived  Pclass     Sex   Age  SibSp  Parch      Fare Embarked\n",
       "258         1       1  female  35.0      0      0  512.3292        C\n",
       "679         1       1    male  36.0      0      1  512.3292        C\n",
       "737         1       1    male  35.0      0      0  512.3292        C"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train[(train['Fare'] > 300)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8e1138ec",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "train.loc[train['Fare'] > 300, 'Fare'] = 300\n",
    "\n",
    "# 티켓값이 500은 너무 높아서 300으로 조정"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "1ca17160",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:>"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data = train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8184d648",
   "metadata": {},
   "source": [
    "# feature engineering\n",
    "\n",
    "pipeline 활용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "14afab7e",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = train.drop(columns=['Survived']) # X 와 타겟 분리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "4bbee2c0",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_attribs_list = ['Age','SibSp','Parch','Fare']\n",
    "cat_1hot_attribs_list = ['Sex','Embarked']\n",
    "cat_ord_attribs_list = ['Pclass']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "8ff4d1d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.pipeline import Pipeline # pipeline 함수 \n",
    "from sklearn.preprocessing import StandardScaler # 스케일링 라이브러리\n",
    "from sklearn.impute import SimpleImputer # 결측치 처리 라이브러리\n",
    "from sklearn.preprocessing import OneHotEncoder \n",
    "from sklearn.preprocessing import OrdinalEncoder\n",
    "from sklearn.compose import ColumnTransformer"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6886193b",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.base import BaseEstimator, TransformerMixin\n",
    "\n",
    "# 수치형 열과 범주형 열을 선택하기 위한 클래스\n",
    "class DataFrameSelector(BaseEstimator, TransformerMixin):\n",
    "    def __init__(self, attribute_names):\n",
    "        self.attribute_names = attribute_names\n",
    "    def fit(self, X, y=None):\n",
    "        return self\n",
    "    def transform(self, X):\n",
    "        return X[self.attribute_names].values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "7017504b",
   "metadata": {},
   "outputs": [],
   "source": [
    "num_pipeline = Pipeline([ # 수치형 변수 전처리 파이프라인 \n",
    "        ('imputer', SimpleImputer(strategy=\"mean\")),\n",
    "        ('std_scaler', StandardScaler())\n",
    "    ]) \n",
    "\n",
    "cat_1hot_pipeline = Pipeline([ # 순서가 없는 범주형 변수 전처리 파이프라인\n",
    "        ('cat_encoder', OneHotEncoder(sparse=False)),\n",
    "    ])\n",
    "\n",
    "cat_ord_pipeline = Pipeline([ # 순서가 있는 범주형 변수 전처리 파이프라인\n",
    "        #('selector', DataFrameSelector(cat_ord_attribs)),\n",
    "        ('cat_encoder', OrdinalEncoder())\n",
    "    ])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "20f9618c",
   "metadata": {},
   "outputs": [],
   "source": [
    "full_pipeline = ColumnTransformer([ # 각 컬럼별 파이프라인 적용 \n",
    "    (\"num\", num_pipeline, num_attribs_list),\n",
    "    (\"cat\", cat_1hot_pipeline, cat_1hot_attribs_list),\n",
    "    ('ord',cat_ord_pipeline,cat_ord_attribs_list)\n",
    "])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "f160b43b",
   "metadata": {},
   "outputs": [],
   "source": [
    "X_prepared = full_pipeline.fit_transform(X)\n",
    "test_prepared = full_pipeline.fit_transform(test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "a371f0f9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.5924806 ,  0.43279337, -0.47367361, ...,  0.        ,\n",
       "         1.        ,  2.        ],\n",
       "       [ 0.63878901,  0.43279337, -0.47367361, ...,  0.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [-0.2846632 , -0.4745452 , -0.47367361, ...,  0.        ,\n",
       "         1.        ,  2.        ],\n",
       "       ...,\n",
       "       [ 0.        ,  0.43279337,  2.00893337, ...,  0.        ,\n",
       "         1.        ,  2.        ],\n",
       "       [-0.2846632 , -0.4745452 , -0.47367361, ...,  0.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [ 0.17706291, -0.4745452 , -0.47367361, ...,  1.        ,\n",
       "         0.        ,  2.        ]])"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_prepared"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "15f2f570",
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.34428417, -0.49947002, -0.4002477 , ...,  1.        ,\n",
       "         0.        ,  2.        ],\n",
       "       [ 1.33465451,  0.61699237, -0.4002477 , ...,  0.        ,\n",
       "         1.        ,  2.        ],\n",
       "       [ 2.52309891, -0.49947002, -0.4002477 , ...,  1.        ,\n",
       "         0.        ,  1.        ],\n",
       "       ...,\n",
       "       [ 0.66120268, -0.49947002, -0.4002477 , ...,  0.        ,\n",
       "         1.        ,  2.        ],\n",
       "       [-0.03608795, -0.49947002, -0.4002477 , ...,  0.        ,\n",
       "         1.        ,  2.        ],\n",
       "       [-0.03608795,  0.61699237,  0.61989583, ...,  0.        ,\n",
       "         0.        ,  2.        ]])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_prepared"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b967c1e6",
   "metadata": {},
   "source": [
    "# train, val 분리"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8a03bc0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split # train 과 valid 으로 나눈다. \n",
    "\n",
    "X_train, X_val, y_train, y_val = train_test_split(X_prepared, y, test_size=0.2, random_state=190000)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5111394",
   "metadata": {},
   "source": [
    "# 모델 학습"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "629ca7ea",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SVC()"
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.svm import SVC # 이진 분류에 좋은 성능을 내는 svm 의 classifier 을 사용하였습니다.\n",
    "\n",
    "svc_model = SVC()\n",
    "svc_model.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "f2d47aa6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'rbf'"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svc_model.kernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "a3a6ce7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0,\n",
       "       0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0,\n",
       "       1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1, 1,\n",
       "       0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 1,\n",
       "       0, 0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0,\n",
       "       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1,\n",
       "       1, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0, 0, 1, 1, 1,\n",
       "       0, 0, 1], dtype=int64)"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svc_model.predict(X_val) # 모델 예측"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd73730e",
   "metadata": {},
   "source": [
    "# 모델 평가"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "41ec7ebc",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_score, recall_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import confusion_matrix\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "96d7296b",
   "metadata": {},
   "outputs": [],
   "source": [
    "def model_eval(pred, answer):\n",
    "    print(f'recall_score : {recall_score(pred,answer)}')\n",
    "    print(f'precision_score : {precision_score(pred,answer)}')\n",
    "    print(f'f1_score : {f1_score(pred,answer)}')\n",
    "    print(f'coufusion_matrix : ')\n",
    "    print(confusion_matrix(pred,answer))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "74782f9a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "recall_score : 0.8461538461538461\n",
      "precision_score : 0.6875\n",
      "f1_score : 0.7586206896551724\n",
      "coufusion_matrix : \n",
      "[[107  20]\n",
      " [  8  44]]\n"
     ]
    }
   ],
   "source": [
    "model_eval(svc_model.predict(X_val),y_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9a65cd10",
   "metadata": {},
   "source": [
    "# 모델 튜닝"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "1fc4a975",
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "04b624a9",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 28 candidates, totalling 140 fits\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.03, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.03, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.03, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.03, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.03, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.3, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.3, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.3, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.3, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.3, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=1.0, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=1.0, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=1.0, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=1.0, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=1.0, kernel=rbf ....................................\n",
      "[CV] ..................... C=0.1, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=3, kernel=rbf ......................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ....................... C=0.1, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=3, kernel=rbf ......................................\n",
      "[CV] ....................... C=0.1, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=3, kernel=rbf ......................................\n",
      "[CV] ....................... C=0.1, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=3, kernel=rbf ......................................\n",
      "[CV] ....................... C=0.1, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=3, kernel=rbf ......................................\n",
      "[CV] ....................... C=0.1, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.03, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.03, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.03, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.03, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.03, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.1, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.1, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.1, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.1, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.1, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.3, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.3, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.3, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.3, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.3, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=1.0, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=1.0, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=1.0, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=1.0, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=1.0, kernel=rbf ......................................\n",
      "[CV] ....................... C=1, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=3, kernel=rbf ........................................\n",
      "[CV] ......................... C=1, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=3, kernel=rbf ........................................\n",
      "[CV] ......................... C=1, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=3, kernel=rbf ........................................\n",
      "[CV] ......................... C=1, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=3, kernel=rbf ........................................\n",
      "[CV] ......................... C=1, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=3, kernel=rbf ........................................\n",
      "[CV] ......................... C=1, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.01, kernel=rbf ....................................\n",
      "[CV] ..................... C=10, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.01, kernel=rbf ....................................\n",
      "[CV] ..................... C=10, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.01, kernel=rbf ....................................\n",
      "[CV] ..................... C=10, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.01, kernel=rbf ....................................\n",
      "[CV] ..................... C=10, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.01, kernel=rbf ....................................\n",
      "[CV] ..................... C=10, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.03, kernel=rbf ....................................\n",
      "[CV] ..................... C=10, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.03, kernel=rbf ....................................\n",
      "[CV] ..................... C=10, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.03, kernel=rbf ....................................\n",
      "[CV] ..................... C=10, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.03, kernel=rbf ....................................\n",
      "[CV] ..................... C=10, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.03, kernel=rbf ....................................\n",
      "[CV] ..................... C=10, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.1, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.1, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.1, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.1, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.1, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.3, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.3, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.3, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.3, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=0.3, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=1.0, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=1.0, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=1.0, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=1.0, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=1.0, kernel=rbf .....................................\n",
      "[CV] ...................... C=10, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=3, kernel=rbf .......................................\n",
      "[CV] ........................ C=10, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=3, kernel=rbf .......................................\n",
      "[CV] ........................ C=10, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=3, kernel=rbf .......................................\n",
      "[CV] ........................ C=10, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=3, kernel=rbf .......................................\n",
      "[CV] ........................ C=10, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=10, gamma=3, kernel=rbf .......................................\n",
      "[CV] ........................ C=10, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=100, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.01, kernel=rbf ...................................\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] .................... C=100, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=100, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=100, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=100, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.03, kernel=rbf ...................................\n",
      "[CV] .................... C=100, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.03, kernel=rbf ...................................\n",
      "[CV] .................... C=100, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.03, kernel=rbf ...................................\n",
      "[CV] .................... C=100, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.03, kernel=rbf ...................................\n",
      "[CV] .................... C=100, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.03, kernel=rbf ...................................\n",
      "[CV] .................... C=100, gamma=0.03, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.1, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=0.1, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.3, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.3, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.3, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.3, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=0.3, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=0.3, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=1.0, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=1.0, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=1.0, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=1.0, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=1.0, kernel=rbf ....................................\n",
      "[CV] ..................... C=100, gamma=1.0, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=3, kernel=rbf ......................................\n",
      "[CV] ....................... C=100, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=3, kernel=rbf ......................................\n",
      "[CV] ....................... C=100, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=3, kernel=rbf ......................................\n",
      "[CV] ....................... C=100, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=3, kernel=rbf ......................................\n",
      "[CV] ....................... C=100, gamma=3, kernel=rbf, total=   0.0s\n",
      "[CV] C=100, gamma=3, kernel=rbf ......................................\n",
      "[CV] ....................... C=100, gamma=3, kernel=rbf, total=   0.1s\n",
      "[CV] C=10, kernel=linear .............................................\n",
      "[CV] .............................. C=10, kernel=linear, total=   0.0s\n",
      "[CV] C=10, kernel=linear .............................................\n",
      "[CV] .............................. C=10, kernel=linear, total=   0.0s\n",
      "[CV] C=10, kernel=linear .............................................\n",
      "[CV] .............................. C=10, kernel=linear, total=   0.0s\n",
      "[CV] C=10, kernel=linear .............................................\n",
      "[CV] .............................. C=10, kernel=linear, total=   0.0s\n",
      "[CV] C=10, kernel=linear .............................................\n",
      "[CV] .............................. C=10, kernel=linear, total=   0.0s\n",
      "[CV] C=30, kernel=linear .............................................\n",
      "[CV] .............................. C=30, kernel=linear, total=   0.0s\n",
      "[CV] C=30, kernel=linear .............................................\n",
      "[CV] .............................. C=30, kernel=linear, total=   0.0s\n",
      "[CV] C=30, kernel=linear .............................................\n",
      "[CV] .............................. C=30, kernel=linear, total=   0.0s\n",
      "[CV] C=30, kernel=linear .............................................\n",
      "[CV] .............................. C=30, kernel=linear, total=   0.1s\n",
      "[CV] C=30, kernel=linear .............................................\n",
      "[CV] .............................. C=30, kernel=linear, total=   0.1s\n",
      "[CV] C=60, kernel=linear .............................................\n",
      "[CV] .............................. C=60, kernel=linear, total=   0.0s\n",
      "[CV] C=60, kernel=linear .............................................\n",
      "[CV] .............................. C=60, kernel=linear, total=   0.0s\n",
      "[CV] C=60, kernel=linear .............................................\n",
      "[CV] .............................. C=60, kernel=linear, total=   0.0s\n",
      "[CV] C=60, kernel=linear .............................................\n",
      "[CV] .............................. C=60, kernel=linear, total=   0.1s\n",
      "[CV] C=60, kernel=linear .............................................\n",
      "[CV] .............................. C=60, kernel=linear, total=   0.1s\n",
      "[CV] C=100, kernel=linear ............................................\n",
      "[CV] ............................. C=100, kernel=linear, total=   0.1s\n",
      "[CV] C=100, kernel=linear ............................................\n",
      "[CV] ............................. C=100, kernel=linear, total=   0.1s\n",
      "[CV] C=100, kernel=linear ............................................\n",
      "[CV] ............................. C=100, kernel=linear, total=   0.1s\n",
      "[CV] C=100, kernel=linear ............................................\n",
      "[CV] ............................. C=100, kernel=linear, total=   0.2s\n",
      "[CV] C=100, kernel=linear ............................................\n",
      "[CV] ............................. C=100, kernel=linear, total=   0.2s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done 140 out of 140 | elapsed:    2.6s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=SVC(),\n",
       "             param_grid=[{'C': [0.1, 1, 10, 100],\n",
       "                          'gamma': [0.01, 0.03, 0.1, 0.3, 1.0, 3],\n",
       "                          'kernel': ['rbf']},\n",
       "                         {'C': [10, 30, 60, 100], 'kernel': ['linear']}],\n",
       "             scoring='f1', verbose=2)"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# GridSearchCV 를 통해 파라미터 튜닝을 진행\n",
    "tuned_parameters_2 = [\n",
    "    {\"kernel\": [\"rbf\"], \"C\": [0.1,1,10, 100],'gamma' : [0.01,0.03,0.1,0.3,1.0,3]},\n",
    "    {\"kernel\": [\"linear\"], \"C\": [10,30,60, 100]},\n",
    "]\n",
    "\n",
    "svr_reg_tuned_2 = GridSearchCV(SVC(),tuned_parameters_2,cv = 5,scoring=\"f1\",verbose=2,refit=True)\n",
    "svr_reg_tuned_2.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "263de6fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.7613389883883762, SVC(C=1, gamma=0.1))"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_reg_tuned_2.best_score_ , svr_reg_tuned_2.best_estimator_# gamma 가 가장 작은 0.1 이 나왔기 때문에 이 값을 낮춰서 다시 진행"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "2e264e53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "recall_score : 0.8269230769230769\n",
      "precision_score : 0.671875\n",
      "f1_score : 0.7413793103448276\n",
      "coufusion_matrix : \n",
      "[[106  21]\n",
      " [  9  43]]\n"
     ]
    }
   ],
   "source": [
    "model_eval(svr_reg_tuned_2.predict(X_val),y_val)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "0528716d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fitting 5 folds for each of 8 candidates, totalling 40 fits\n",
      "[CV] C=0.1, gamma=0.0003, kernel=rbf .................................\n",
      "[CV] .................. C=0.1, gamma=0.0003, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.0003, kernel=rbf .................................\n",
      "[CV] .................. C=0.1, gamma=0.0003, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.0003, kernel=rbf .................................\n",
      "[CV] .................. C=0.1, gamma=0.0003, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.0003, kernel=rbf .................................\n",
      "[CV] .................. C=0.1, gamma=0.0003, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.0003, kernel=rbf .................................\n",
      "[CV] .................. C=0.1, gamma=0.0003, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ................... C=0.1, gamma=0.001, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ................... C=0.1, gamma=0.001, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ................... C=0.1, gamma=0.001, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ................... C=0.1, gamma=0.001, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.001, kernel=rbf ..................................\n",
      "[CV] ................... C=0.1, gamma=0.001, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.003, kernel=rbf ..................................\n",
      "[CV] ................... C=0.1, gamma=0.003, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.003, kernel=rbf ..................................\n",
      "[CV] ................... C=0.1, gamma=0.003, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.003, kernel=rbf ..................................\n",
      "[CV] ................... C=0.1, gamma=0.003, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.003, kernel=rbf ..................................\n",
      "[CV] ................... C=0.1, gamma=0.003, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.003, kernel=rbf ..................................\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n",
      "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    0.0s remaining:    0.0s\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[CV] ................... C=0.1, gamma=0.003, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=0.1, gamma=0.01, kernel=rbf ...................................\n",
      "[CV] .................... C=0.1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.0003, kernel=rbf ...................................\n",
      "[CV] .................... C=1, gamma=0.0003, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.0003, kernel=rbf ...................................\n",
      "[CV] .................... C=1, gamma=0.0003, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.0003, kernel=rbf ...................................\n",
      "[CV] .................... C=1, gamma=0.0003, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.0003, kernel=rbf ...................................\n",
      "[CV] .................... C=1, gamma=0.0003, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.0003, kernel=rbf ...................................\n",
      "[CV] .................... C=1, gamma=0.0003, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.001, kernel=rbf ....................................\n",
      "[CV] ..................... C=1, gamma=0.001, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.001, kernel=rbf ....................................\n",
      "[CV] ..................... C=1, gamma=0.001, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.001, kernel=rbf ....................................\n",
      "[CV] ..................... C=1, gamma=0.001, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.001, kernel=rbf ....................................\n",
      "[CV] ..................... C=1, gamma=0.001, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.001, kernel=rbf ....................................\n",
      "[CV] ..................... C=1, gamma=0.001, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.003, kernel=rbf ....................................\n",
      "[CV] ..................... C=1, gamma=0.003, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.003, kernel=rbf ....................................\n",
      "[CV] ..................... C=1, gamma=0.003, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.003, kernel=rbf ....................................\n",
      "[CV] ..................... C=1, gamma=0.003, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.003, kernel=rbf ....................................\n",
      "[CV] ..................... C=1, gamma=0.003, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.003, kernel=rbf ....................................\n",
      "[CV] ..................... C=1, gamma=0.003, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.01, kernel=rbf, total=   0.0s\n",
      "[CV] C=1, gamma=0.01, kernel=rbf .....................................\n",
      "[CV] ...................... C=1, gamma=0.01, kernel=rbf, total=   0.0s\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[Parallel(n_jobs=1)]: Done  40 out of  40 | elapsed:    0.3s finished\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=SVC(),\n",
       "             param_grid=[{'C': [0.1, 1], 'gamma': [0.0003, 0.001, 0.003, 0.01],\n",
       "                          'kernel': ['rbf']}],\n",
       "             scoring='f1', verbose=2)"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tuned_parameters_3 = [\n",
    "    {\"kernel\": [\"rbf\"], \"C\": [0.1,1],'gamma' : [0.0003,0.001,0.003,0.01]}\n",
    "]\n",
    "\n",
    "svr_reg_tuned_3 = GridSearchCV(SVC(),tuned_parameters_3,cv = 5,scoring=\"f1\",verbose=2,refit=True)\n",
    "svr_reg_tuned_3.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "2997d097",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0.7158342705435381, SVC(C=1, gamma=0.01))"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_reg_tuned_3.best_score_ , svr_reg_tuned_3.best_estimator_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "ecafd66c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "recall_score : 0.7636363636363637\n",
      "precision_score : 0.65625\n",
      "f1_score : 0.7058823529411765\n",
      "coufusion_matrix : \n",
      "[[102  22]\n",
      " [ 13  42]]\n"
     ]
    }
   ],
   "source": [
    "model_eval(svr_reg_tuned_3.predict(X_val),y_val) # 오히려 성능이 떨어져서 사용 X"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "56af8f16",
   "metadata": {},
   "source": [
    "# 결과 제출"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "72c071b9",
   "metadata": {},
   "source": [
    "최종적으로 성능이 가장 잘나온 SVC(kernel='rbf',C=1,gamma=0.1) 모델을 사용"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "ffce7e77",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1, 0, 1,\n",
       "       1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,\n",
       "       1, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1,\n",
       "       1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0, 0, 1, 1,\n",
       "       1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0,\n",
       "       0, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0,\n",
       "       0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1,\n",
       "       0, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 1,\n",
       "       1, 0, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 1,\n",
       "       0, 1, 1, 1, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 1, 0,\n",
       "       1, 0, 1, 0, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1,\n",
       "       0, 0, 0, 0, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1,\n",
       "       0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0,\n",
       "       0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1,\n",
       "       0, 1, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0,\n",
       "       1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 1, 0,\n",
       "       0, 0, 1, 0, 1, 0, 0, 1, 0, 1, 1, 0, 1, 0, 0, 1, 1, 0, 0, 1, 0, 0,\n",
       "       1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1,\n",
       "       0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0],\n",
       "      dtype=int64)"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svr_reg_tuned_2.predict(test_prepared) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "5276ae74",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission = pd.read_csv('./Data/titanic/submission(3).csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "6af41430",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission['Survived'] = svr_reg_tuned_2.predict(test_prepared)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "f4e5ef9e",
   "metadata": {},
   "outputs": [],
   "source": [
    "submission.to_csv('./Data/titanic/submission_17011733_윤지환.csv',index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2126606f",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
